
;; Function main (main, funcdef_no=6, decl_uid=2863, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 35:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 36:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 45:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 46:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 56:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 59:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 63:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 66:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 1 in insn 72:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 73:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 91:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 92:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7
EBB 8 9
EBB 10
EBB 11 12
EBB 13 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 14
   Insn 119: point = 0, n_alt = 0
  BB 15
   Insn 123: point = 0, n_alt = -1
   Insn 122: point = 0, n_alt = -2
  BB 13
   Insn 118: point = 2, n_alt = -1
   Insn 117: point = 2, n_alt = 0
   Insn 113: point = 4, n_alt = -2
  BB 3
   Insn 127: point = 7, n_alt = -1
   Insn 29: point = 7, n_alt = 0
   Insn 28: point = 8, n_alt = 0
   Insn 27: point = 8, n_alt = -2
   Insn 26: point = 9, n_alt = 4
   Insn 25: point = 10, n_alt = 2
   Insn 24: point = 10, n_alt = 2
   Insn 23: point = 10, n_alt = -2
   Insn 22: point = 11, n_alt = 3
  BB 12
   Insn 108: point = 12, n_alt = 0
   Insn 107: point = 13, n_alt = 0
   Insn 106: point = 13, n_alt = -2
   Insn 105: point = 14, n_alt = 3
  BB 11
   Insn 103: point = 15, n_alt = -1
   Insn 102: point = 15, n_alt = 0
   Insn 100: point = 16, n_alt = 0
  BB 9
   Insn 131: point = 17, n_alt = -1
   Insn 82: point = 17, n_alt = 1
  BB 8
   Insn 80: point = 17, n_alt = -1
   Insn 79: point = 17, n_alt = 0
   Insn 77: point = 18, n_alt = 0
  BB 6
   Insn 129: point = 19, n_alt = -1
   Insn 49: point = 19, n_alt = 1
  BB 5
   Insn 46: point = 19, n_alt = 15
   Insn 45: point = 20, n_alt = 14
   Insn 44: point = 21, n_alt = 0
   Insn 43: point = 23, n_alt = 3
  BB 4
   Insn 41: point = 24, n_alt = -1
   Insn 40: point = 24, n_alt = 0
   Insn 37: point = 25, n_alt = 0
   Insn 36: point = 26, n_alt = 15
   Insn 35: point = 27, n_alt = 14
   Insn 34: point = 28, n_alt = 3
  BB 2
   Insn 20: point = 29, n_alt = -1
   Insn 19: point = 29, n_alt = 1
   Insn 18: point = 29, n_alt = 5
   Insn 17: point = 30, n_alt = -2
   Insn 16: point = 31, n_alt = 0
   Insn 15: point = 31, n_alt = -2
   Insn 14: point = 32, n_alt = 0
   Insn 13: point = 34, n_alt = 0
   Insn 12: point = 36, n_alt = 0
   Insn 11: point = 37, n_alt = 0
   Insn 10: point = 37, n_alt = 3
   Insn 9: point = 37, n_alt = -2
   Insn 8: point = 38, n_alt = 4
   Insn 7: point = 39, n_alt = -2
   Insn 6: point = 40, n_alt = 3
   Insn 3: point = 41, n_alt = 0
  BB 7
   Insn 74: point = 43, n_alt = 0
   Insn 73: point = 43, n_alt = 15
   Insn 72: point = 44, n_alt = 1
   Insn 71: point = 46, n_alt = 0
   Insn 70: point = 48, n_alt = 3
   Insn 69: point = 49, n_alt = 1
   Insn 68: point = 51, n_alt = 0
   Insn 67: point = 53, n_alt = 0
   Insn 66: point = 54, n_alt = 14
   Insn 65: point = 56, n_alt = 0
   Insn 64: point = 58, n_alt = 3
   Insn 63: point = 59, n_alt = 3
   Insn 62: point = 61, n_alt = 0
   Insn 61: point = 63, n_alt = 0
   Insn 60: point = 65, n_alt = 0
   Insn 59: point = 66, n_alt = 14
   Insn 58: point = 68, n_alt = 0
   Insn 57: point = 70, n_alt = 3
   Insn 56: point = 71, n_alt = 3
   Insn 55: point = 73, n_alt = 0
   Insn 54: point = 75, n_alt = 0
   Insn 53: point = 77, n_alt = 0
  BB 10
   Insn 97: point = 78, n_alt = 0
   Insn 96: point = 78, n_alt = 0
   Insn 95: point = 78, n_alt = 3
   Insn 94: point = 78, n_alt = -2
   Insn 93: point = 79, n_alt = 4
   Insn 92: point = 80, n_alt = 21
   Insn 91: point = 81, n_alt = 8
   Insn 90: point = 83, n_alt = 0
   Insn 89: point = 85, n_alt = 3
   Insn 88: point = 86, n_alt = 1
   Insn 87: point = 88, n_alt = 0
   Insn 86: point = 90, n_alt = 0
 r82: [35..36]
 r83: [33..34]
 r84: [31..32]
 r85: [10..11]
 r86: [24..25]
 r87: [19..21]
 r88: [74..75]
 r89: [72..73]
 r90: [69..71]
 r91: [67..68]
 r92: [45..66]
 r93: [62..63]
 r94: [60..61]
 r95: [57..59]
 r96: [55..56]
 r97: [45..54]
 r98: [50..51]
 r99: [47..49]
 r100: [43..46]
 r101: [43..44]
 r102: [17..18]
 r103: [87..88]
 r104: [84..86]
 r105: [82..83]
 r106: [80..81]
 r107: [15..16]
 r108: [12..12] [5..7]
 r109: [0..4]
 r110: [39..40]
 r111: [37..38]
 r112: [29..30]
 r113: [8..9]
 r114: [26..28]
 r115: [26..27]
 r116: [22..23]
 r117: [19..20]
 r118: [76..77]
 r119: [69..70]
 r120: [64..65]
 r121: [57..58]
 r122: [52..53]
 r123: [47..48]
 r124: [89..90]
 r125: [84..85]
 r126: [78..79]
 r127: [13..14]
 r129: [41..42]
 r130: [2..3]
Compressing live ranges: from 91 to 79 - 86%
Ranges after the compression:
 r82: [29..30]
 r83: [27..28]
 r84: [25..26]
 r85: [6..7]
 r86: [19..20]
 r87: [15..16]
 r88: [63..64]
 r89: [61..62]
 r90: [59..60]
 r91: [57..58]
 r92: [39..56]
 r93: [53..54]
 r94: [51..52]
 r95: [49..50]
 r96: [47..48]
 r97: [39..46]
 r98: [43..44]
 r99: [41..42]
 r100: [37..40]
 r101: [37..38]
 r102: [13..14]
 r103: [75..76]
 r104: [73..74]
 r105: [71..72]
 r106: [69..70]
 r107: [11..12]
 r108: [8..8] [2..3]
 r109: [0..1]
 r110: [33..34]
 r111: [31..32]
 r112: [23..24]
 r113: [4..5]
 r114: [21..22]
 r115: [21..22]
 r116: [17..18]
 r117: [15..16]
 r118: [65..66]
 r119: [59..60]
 r120: [55..56]
 r121: [49..50]
 r122: [45..46]
 r123: [41..42]
 r124: [77..78]
 r125: [73..74]
 r126: [67..68]
 r127: [9..10]
 r129: [35..36]
 r130: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 23
changing reg in insn 37
changing reg in insn 40
changing reg in insn 44
changing reg in insn 46
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 79
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 100
changing reg in insn 102
changing reg in insn 108
changing reg in insn 29
changing reg in insn 113
changing reg in insn 113
changing reg in insn 122
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 60
changing reg in insn 61
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 93
changing reg in insn 94
changing reg in insn 105
changing reg in insn 106
changing reg in insn 3
changing reg in insn 117
deleting insn with uid = 17.
deleting insn with uid = 113.
deleting insn with uid = 122.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 119.


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1]
;;  ref usage 	r0={46d,39u} r1={13d,5u,4e} r2={8d,1u} r4={9d,2u} r5={12d,5u} r6={1d,43u} r7={1d,21u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={27d,5u} r18={6d} r19={1d,1u,5e} r20={12d,5u} r21={8d,1u} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} 
;;    total ref usage 637{500d,128u,9e} in 86{80 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 D.2886+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [129])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":8:12 1159 {stack_protect_set_1_di}
     (nil))
(insn 6 3 7 2 (parallel [
            (set (reg:DI 0 ax [110])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":12:5 210 {*adddi_1}
     (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [110])) "fib.c":12:5 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [111])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f101115a5a0 *.LC0>)) "fib.c":12:5 74 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [111])) "fib.c":12:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f101115a5a0 *.LC0>)
        (nil)))
(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "fib.c":12:5 77 {*movqi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7f1011027d00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "fib.c":12:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:82 n.0_1 ] [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":15:32 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [orig:82 n.0_1 ] [82]))) "fib.c":15:32 147 {*extendsidi2_rex64}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 0 ax [orig:84 _3 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":15:32 656 {*ashldi3_1}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:84 _3 ] [84])) "fib.c":15:32 74 {*movdi_internal}
     (nil))
(call_insn 16 15 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f1011046800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "fib.c":15:32 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 16 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
        (reg/f:DI 0 ax [112])) "fib.c":15:32 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (const_int 0 [0]))) "fib.c":16:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "fib.c":16:8 806 {*jcc}
     (nil)
 -> 32)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:DI 0 ax [orig:85 stderr.1_4 ] [85])
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f1011a3ccf0 stderr>) [4 stderr+0 S8 A64])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [orig:85 stderr.1_4 ] [85])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 1 dx)
        (const_int 25 [0x19])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 4 si)
        (const_int 1 [0x1])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 0 ax [113])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f101115a630 *.LC1>)) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "fib.c":17:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f101115a630 *.LC1>)
        (nil)))
(call_insn 28 27 29 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f1011026c00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) "fib.c":17:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 29 28 127 3 (set (reg:SI 0 ax [orig:108 _29 ] [108])
        (const_int 1 [0x1])) "fib.c":18:16 75 {*movsi_internal}
     (nil))
(jump_insn 127 29 128 3 (set (pc)
        (label_ref 111)) "fib.c":18:16 807 {jump}
     (nil)
 -> 111)
(barrier 128 127 32)
(code_label 32 128 33 4 2 (nil) [1 uses])
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":22:12 74 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DF 20 xmm0 [115])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "fib.c":22:12 135 {*movdf_internal}
     (nil))
(insn 36 35 37 4 (set (mem:DF (reg/f:DI 0 ax [114]) [5 *fib_37+0 S8 A64])
        (reg:DF 20 xmm0 [115])) "fib.c":22:12 135 {*movdf_internal}
     (nil))
(insn 37 36 40 4 (set (reg:SI 0 ax [orig:86 n.2_5 ] [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":23:11 75 {*movsi_internal}
     (nil))
(insn 40 37 41 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:86 n.2_5 ] [86])
            (const_int 1 [0x1]))) "fib.c":23:8 11 {*cmpsi_1}
     (nil))
(jump_insn 41 40 42 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "fib.c":23:8 806 {*jcc}
     (nil)
 -> 47)
(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 5 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":24:12 74 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
                (plus:DI (reg/f:DI 0 ax [116])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":24:12 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 45 44 46 5 (set (reg:DF 20 xmm0 [117])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S8 A64])) "fib.c":24:16 135 {*movdf_internal}
     (nil))
(insn 46 45 47 5 (set (mem:DF (reg/f:DI 0 ax [orig:87 _6 ] [87]) [5 *_6+0 S8 A64])
        (reg:DF 20 xmm0 [117])) "fib.c":24:16 135 {*movdf_internal}
     (nil))
(code_label 47 46 48 6 4 (nil) [1 uses])
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 129 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
        (const_int 2 [0x2])) "fib.c":28:14 75 {*movsi_internal}
     (nil))
(jump_insn 129 49 130 6 (set (pc)
        (label_ref 75)) "fib.c":28:5 807 {jump}
     (nil)
 -> 75)
(barrier 130 129 78)
(code_label 78 130 52 7 6 (nil) [1 uses])
(note 52 78 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])) "fib.c":29:21 75 {*movsi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:DI 0 ax [orig:88 _7 ] [88])
        (sign_extend:DI (reg:SI 0 ax [118]))) "fib.c":29:21 147 {*extendsidi2_rex64}
     (nil))
(insn 55 54 56 7 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 _7 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:21 656 {*ashldi3_1}
     (nil))
(insn 56 55 57 7 (parallel [
            (set (reg:DI 1 dx [orig:90 _9 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _8 ] [89])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:21 210 {*adddi_1}
     (nil))
(insn 57 56 58 7 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":29:21 74 {*movdi_internal}
     (nil))
(insn 58 57 59 7 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _10 ] [91])
                (plus:DI (reg/f:DI 0 ax [119])
                    (reg:DI 1 dx [orig:90 _9 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:21 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (reg:DI 1 dx [orig:90 _9 ] [90]))
        (nil)))
(insn 59 58 60 7 (set (reg:DF 21 xmm1 [orig:92 _11 ] [92])
        (mem:DF (reg/f:DI 0 ax [orig:91 _10 ] [91]) [5 *_10+0 S8 A64])) "fib.c":29:21 135 {*movdf_internal}
     (nil))
(insn 60 59 61 7 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])) "fib.c":29:34 75 {*movsi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:DI 0 ax [orig:93 _12 ] [93])
        (sign_extend:DI (reg:SI 0 ax [120]))) "fib.c":29:34 147 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 7 (parallel [
            (set (reg:DI 0 ax [orig:94 _13 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _12 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:34 656 {*ashldi3_1}
     (nil))
(insn 63 62 64 7 (parallel [
            (set (reg:DI 1 dx [orig:95 _14 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _13 ] [94])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:34 210 {*adddi_1}
     (nil))
(insn 64 63 65 7 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":29:34 74 {*movdi_internal}
     (nil))
(insn 65 64 66 7 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _15 ] [96])
                (plus:DI (reg/f:DI 0 ax [121])
                    (reg:DI 1 dx [orig:95 _14 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:34 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (reg:DI 1 dx [orig:95 _14 ] [95]))
        (nil)))
(insn 66 65 67 7 (set (reg:DF 20 xmm0 [orig:97 _16 ] [97])
        (mem:DF (reg/f:DI 0 ax [orig:96 _15 ] [96]) [5 *_15+0 S8 A64])) "fib.c":29:34 135 {*movdf_internal}
     (nil))
(insn 67 66 68 7 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])) "fib.c":29:12 75 {*movsi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:DI 0 ax [orig:98 _17 ] [98])
        (sign_extend:DI (reg:SI 0 ax [122]))) "fib.c":29:12 147 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 7 (parallel [
            (set (reg:DI 1 dx [orig:99 _18 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:12 656 {*ashldi3_1}
     (nil))
(insn 70 69 71 7 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":29:12 74 {*movdi_internal}
     (nil))
(insn 71 70 72 7 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _19 ] [100])
                (plus:DI (reg/f:DI 0 ax [123])
                    (reg:DI 1 dx [orig:99 _18 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:12 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (reg:DI 1 dx [orig:99 _18 ] [99]))
        (nil)))
(insn 72 71 73 7 (set (reg:DF 20 xmm0 [orig:101 _20 ] [101])
        (plus:DF (reg:DF 20 xmm0 [orig:97 _16 ] [97])
            (reg:DF 21 xmm1 [orig:92 _11 ] [92]))) "fib.c":29:29 981 {*fop_df_comm}
     (nil))
(insn 73 72 74 7 (set (mem:DF (reg/f:DI 0 ax [orig:100 _19 ] [100]) [5 *_19+0 S8 A64])
        (reg:DF 20 xmm0 [orig:101 _20 ] [101])) "fib.c":29:16 135 {*movdf_internal}
     (nil))
(insn 74 73 75 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":28:29 209 {*addsi_1}
     (nil))
(code_label 75 74 76 8 5 (nil) [1 uses])
(note 76 75 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 79 8 (set (reg:SI 0 ax [orig:102 n.3_21 ] [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":28:23 75 {*movsi_internal}
     (nil))
(insn 79 77 80 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
            (reg:SI 0 ax [orig:102 n.3_21 ] [102]))) "fib.c":28:23 11 {*cmpsi_1}
     (nil))
(jump_insn 80 79 81 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "fib.c":28:23 806 {*jcc}
     (nil)
 -> 78)
(note 81 80 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 131 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
        (const_int 0 [0])) "fib.c":33:14 75 {*movsi_internal}
     (nil))
(jump_insn 131 82 132 9 (set (pc)
        (label_ref 98)) "fib.c":33:5 807 {jump}
     (nil)
 -> 98)
(barrier 132 131 101)
(code_label 101 132 85 10 8 (nil) [1 uses])
(note 85 101 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 10 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "fib.c":34:33 75 {*movsi_internal}
     (nil))
(insn 87 86 88 10 (set (reg:DI 0 ax [orig:103 _22 ] [103])
        (sign_extend:DI (reg:SI 0 ax [124]))) "fib.c":34:33 147 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 10 (parallel [
            (set (reg:DI 1 dx [orig:104 _23 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 _22 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":34:33 656 {*ashldi3_1}
     (nil))
(insn 89 88 90 10 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":34:33 74 {*movdi_internal}
     (nil))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _24 ] [105])
                (plus:DI (reg/f:DI 0 ax [125])
                    (reg:DI 1 dx [orig:104 _23 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":34:33 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (reg:DI 1 dx [orig:104 _23 ] [104]))
        (nil)))
(insn 91 90 92 10 (set (reg:DF 0 ax [orig:106 _25 ] [106])
        (mem:DF (reg/f:DI 0 ax [orig:105 _24 ] [105]) [5 *_24+0 S8 A64])) "fib.c":34:9 135 {*movdf_internal}
     (nil))
(insn 92 91 93 10 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [orig:106 _25 ] [106])) "fib.c":34:9 135 {*movdf_internal}
     (nil))
(insn 93 92 94 10 (set (reg:DI 0 ax [126])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f101115a6c0 *.LC4>)) "fib.c":34:9 74 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [126])) "fib.c":34:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f101115a6c0 *.LC4>)
        (nil)))
(insn 95 94 96 10 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "fib.c":34:9 77 {*movqi_internal}
     (nil))
(call_insn 96 95 97 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f1011027100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "fib.c":34:9 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 97 96 98 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":33:29 209 {*addsi_1}
     (nil))
(code_label 98 97 99 11 7 (nil) [1 uses])
(note 99 98 100 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 102 11 (set (reg:SI 0 ax [orig:107 n.4_26 ] [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":33:23 75 {*movsi_internal}
     (nil))
(insn 102 100 103 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:107 n.4_26 ] [107]))) "fib.c":33:23 11 {*cmpsi_1}
     (nil))
(jump_insn 103 102 104 11 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) "fib.c":33:23 806 {*jcc}
     (nil)
 -> 101)
(note 104 103 105 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 12 (set (reg:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":38:5 74 {*movdi_internal}
     (nil))
(insn 106 105 107 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [127])) "fib.c":38:5 74 {*movdi_internal}
     (nil))
(call_insn 107 106 108 12 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f101103fd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "fib.c":38:5 813 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 108 107 111 12 (set (reg:SI 0 ax [orig:108 _29 ] [108])
        (const_int 0 [0])) "fib.c":40:12 75 {*movsi_internal}
     (nil))
(code_label 111 108 112 13 9 (nil) [1 uses])
(note 112 111 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 112 118 13 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [1 D.2886+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 1 dx [130]))
        ]) "fib.c":41:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 118 117 125 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "fib.c":41:1 806 {*jcc}
     (nil)
 -> 121)
(note 125 118 119 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 119 125 120 14 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f1011164900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "fib.c":41:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 120 119 121)
(code_label 121 120 126 15 10 (nil) [1 uses])
(note 126 121 123 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 123 126 133 15 (use (reg/i:SI 0 ax)) "fib.c":41:1 -1
     (nil))
(note 133 123 0 NOTE_INSN_DELETED)
