
;; Function main (main, funcdef_no=6, decl_uid=2863, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 16 n_edges 19 count 16 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 2
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;; 2 succs { 3 4 }
;; 3 succs { 13 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 10 12 }
;; 12 succs { 13 }
;; 13 succs { 15 14 }
;; 14 succs { }
;; 15 succs { 1 }
Removing SCRATCH to p129 in insn #3 (nop 2)
rescanning insn with uid = 3.
Removing SCRATCH to p130 in insn #117 (nop 3)
rescanning insn with uid = 117.
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 119.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 16 n_edges 19 count 16 (    1)

Pass 0 for finding pseudo/allocno costs

    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r127,l0) best DIREG, allocno GENERAL_REGS
    r126: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r126,l0) best DIREG, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a34 (r117,l0) best SSE_REGS, allocno SSE_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a38 (r115,l0) best SSE_REGS, allocno SSE_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r113,l0) best DIREG, allocno GENERAL_REGS
    r112: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r112,l0) best AREG, allocno GENERAL_REGS
    r111: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r111,l0) best DIREG, allocno GENERAL_REGS
    r110: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r110,l0) best SIREG, allocno GENERAL_REGS
    r109: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r109,l0) best AREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a6 (r106,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a14 (r101,l0) best SSE_REGS, allocno SSE_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a15 (r97,l0) best SSE_REGS, allocno SSE_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a16 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r85,l0) best CREG, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a42 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r109,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a2(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:412000 MEM:7000
  a3(r127,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r126,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a6(r106,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a7(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a9(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a10(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a14(r101,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a15(r97,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a16(r92,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a17(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a18(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a19(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a23(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a24(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:10000
  a25(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a28(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a29(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a30(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:10000
  a31(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a34(r117,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a35(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a36(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a37(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r115,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a39(r113,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a40(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r112,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a42(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a43(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r111,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a46(r110,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a47(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000

   Insn 123(l0): point = 0
   Insn 122(l0): point = 2
   Insn 119(l0): point = 5
   Insn 118(l0): point = 8
   Insn 117(l0): point = 10
   Insn 113(l0): point = 12
   Insn 108(l0): point = 15
   Insn 107(l0): point = 17
   Insn 106(l0): point = 19
   Insn 105(l0): point = 21
   Insn 97(l0): point = 24
   Insn 96(l0): point = 26
   Insn 95(l0): point = 28
   Insn 94(l0): point = 30
   Insn 93(l0): point = 32
   Insn 92(l0): point = 34
   Insn 91(l0): point = 36
   Insn 90(l0): point = 38
   Insn 89(l0): point = 40
   Insn 88(l0): point = 42
   Insn 87(l0): point = 44
   Insn 86(l0): point = 46
   Insn 103(l0): point = 49
   Insn 102(l0): point = 51
   Insn 100(l0): point = 53
   Insn 131(l0): point = 56
   Insn 82(l0): point = 58
   Insn 74(l0): point = 61
   Insn 73(l0): point = 63
   Insn 72(l0): point = 65
   Insn 71(l0): point = 67
   Insn 70(l0): point = 69
   Insn 69(l0): point = 71
   Insn 68(l0): point = 73
   Insn 67(l0): point = 75
   Insn 66(l0): point = 77
   Insn 65(l0): point = 79
   Insn 64(l0): point = 81
   Insn 63(l0): point = 83
   Insn 62(l0): point = 85
   Insn 61(l0): point = 87
   Insn 60(l0): point = 89
   Insn 59(l0): point = 91
   Insn 58(l0): point = 93
   Insn 57(l0): point = 95
   Insn 56(l0): point = 97
   Insn 55(l0): point = 99
   Insn 54(l0): point = 101
   Insn 53(l0): point = 103
   Insn 80(l0): point = 106
   Insn 79(l0): point = 108
   Insn 77(l0): point = 110
   Insn 129(l0): point = 113
   Insn 49(l0): point = 115
   Insn 46(l0): point = 118
   Insn 45(l0): point = 120
   Insn 44(l0): point = 122
   Insn 43(l0): point = 124
   Insn 41(l0): point = 127
   Insn 40(l0): point = 129
   Insn 37(l0): point = 131
   Insn 36(l0): point = 133
   Insn 35(l0): point = 135
   Insn 34(l0): point = 137
   Insn 127(l0): point = 140
   Insn 29(l0): point = 142
   Insn 28(l0): point = 144
   Insn 27(l0): point = 146
   Insn 26(l0): point = 148
   Insn 25(l0): point = 150
   Insn 24(l0): point = 152
   Insn 23(l0): point = 154
   Insn 22(l0): point = 156
   Insn 20(l0): point = 159
   Insn 19(l0): point = 161
   Insn 18(l0): point = 163
   Insn 17(l0): point = 165
   Insn 16(l0): point = 167
   Insn 15(l0): point = 169
   Insn 14(l0): point = 171
   Insn 13(l0): point = 173
   Insn 12(l0): point = 175
   Insn 11(l0): point = 177
   Insn 10(l0): point = 179
   Insn 9(l0): point = 181
   Insn 8(l0): point = 183
   Insn 7(l0): point = 185
   Insn 6(l0): point = 187
   Insn 3(l0): point = 189
 a0(r109): [8..12] [3..4]
 a1(r130): [10..10]
 a2(r108): [140..142] [13..15]
 a3(r127): [20..21]
 a4(r107): [52..53]
 a5(r126): [31..32]
 a6(r106): [35..36]
 a7(r105): [37..38]
 a8(r125): [39..40]
 a9(r104): [39..42]
 a10(r103): [43..44]
 a11(r124): [45..46]
 a12(r102): [109..110]
 a13(r100): [64..67]
 a14(r101): [64..65]
 a15(r97): [66..77]
 a16(r92): [66..91]
 a17(r123): [68..69]
 a18(r99): [68..71]
 a19(r98): [72..73]
 a20(r122): [74..75]
 a21(r96): [78..79]
 a22(r121): [80..81]
 a23(r95): [80..83]
 a24(r94): [84..85]
 a25(r93): [86..87]
 a26(r120): [88..89]
 a27(r91): [92..93]
 a28(r119): [94..95]
 a29(r90): [94..97]
 a30(r89): [98..99]
 a31(r88): [100..101]
 a32(r118): [102..103]
 a33(r87): [119..122]
 a34(r117): [119..120]
 a35(r116): [123..124]
 a36(r86): [130..131]
 a37(r114): [134..137]
 a38(r115): [134..135]
 a39(r113): [147..148]
 a40(r85): [155..156]
 a41(r112): [164..165]
 a42(r84): [170..171]
 a43(r83): [172..173]
 a44(r82): [174..175]
 a45(r111): [182..183]
 a46(r110): [186..187]
 a47(r129): [189..189]
Compressing live ranges: from 192 to 82 - 42%
Ranges after the compression:
 a0(r109): [0..4]
 a1(r130): [3..3]
 a2(r108): [63..64] [5..6]
 a3(r127): [7..8]
 a4(r107): [21..22]
 a5(r126): [9..10]
 a6(r106): [11..12]
 a7(r105): [13..14]
 a8(r125): [15..16]
 a9(r104): [15..16]
 a10(r103): [17..18]
 a11(r124): [19..20]
 a12(r102): [53..54]
 a13(r100): [23..26]
 a14(r101): [23..24]
 a15(r97): [25..32]
 a16(r92): [25..42]
 a17(r123): [27..28]
 a18(r99): [27..28]
 a19(r98): [29..30]
 a20(r122): [31..32]
 a21(r96): [33..34]
 a22(r121): [35..36]
 a23(r95): [35..36]
 a24(r94): [37..38]
 a25(r93): [39..40]
 a26(r120): [41..42]
 a27(r91): [43..44]
 a28(r119): [45..46]
 a29(r90): [45..46]
 a30(r89): [47..48]
 a31(r88): [49..50]
 a32(r118): [51..52]
 a33(r87): [55..56]
 a34(r117): [55..56]
 a35(r116): [57..58]
 a36(r86): [59..60]
 a37(r114): [61..62]
 a38(r115): [61..62]
 a39(r113): [65..66]
 a40(r85): [67..68]
 a41(r112): [69..70]
 a42(r84): [71..72]
 a43(r83): [73..74]
 a44(r82): [75..76]
 a45(r111): [77..78]
 a46(r110): [79..80]
 a47(r129): [81..81]
  pref0:a3(r127)<-hr5@1500
  pref1:a5(r126)<-hr5@1500
  pref2:a39(r113)<-hr5@1500
  pref3:a41(r112)<-hr0@1500
  pref4:a45(r111)<-hr5@1500
  pref5:a46(r110)<-hr4@1500
  pref6:a0(r109)<-hr0@1500
  pref7:a6(r106)<-hr20@2000
  pref8:a40(r85)<-hr2@1500
  pref9:a42(r84)<-hr5@1500
  regions=1, blocks=16, points=82
    allocnos=48 (big 0), copies=0, conflicts=0, ranges=49
Disposition:
   44:r82  l0     0   43:r83  l0     0   42:r84  l0     0   40:r85  l0     0
   36:r86  l0     0   33:r87  l0     0   31:r88  l0     0   30:r89  l0     0
   29:r90  l0     1   27:r91  l0     0   16:r92  l0    21   25:r93  l0     0
   24:r94  l0     0   23:r95  l0     1   21:r96  l0     0   15:r97  l0    20
   19:r98  l0     0   18:r99  l0     1   13:r100 l0     0   14:r101 l0    20
   12:r102 l0     0   10:r103 l0     0    9:r104 l0     1    7:r105 l0     0
    6:r106 l0     0    4:r107 l0     0    2:r108 l0     0    0:r109 l0     0
   46:r110 l0     0   45:r111 l0     0   41:r112 l0     0   39:r113 l0     0
   37:r114 l0     0   38:r115 l0    20   35:r116 l0     0   34:r117 l0    20
   32:r118 l0     0   28:r119 l0     0   26:r120 l0     0   22:r121 l0     0
   20:r122 l0     0   17:r123 l0     0   11:r124 l0     0    8:r125 l0     0
    5:r126 l0     0    3:r127 l0     0   47:r129 l0     0    1:r130 l0     1
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={10d,5u} r1={8d,1u} r2={8d,1u} r4={9d,2u} r5={12d,5u} r6={1d,15u} r7={1d,21u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,14u} r17={27d,5u} r18={6d} r19={1d,43u,5e} r20={8d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u,1e} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u,1e} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u,1e} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u,1e} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={2d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r129={1d} r130={1d} 
;;    total ref usage 672{504d,159u,9e} in 89{83 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 D.2886+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 129)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":8:12 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 129)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 6 3 7 2 (parallel [
            (set (reg:DI 110)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":12:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (reg:DI 110)) "fib.c":12:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 110)
        (nil)))
(insn 8 7 9 2 (set (reg:DI 111)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f101115a5a0 *.LC0>)) "fib.c":12:5 74 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 111)) "fib.c":12:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f101115a5a0 *.LC0>)
            (nil))))
(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "fib.c":12:5 77 {*movqi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7f1011027d00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "fib.c":12:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 12 11 13 2 (set (reg:SI 82 [ n.0_1 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":15:32 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 83 [ _2 ])
        (sign_extend:DI (reg:SI 82 [ n.0_1 ]))) "fib.c":15:32 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 82 [ n.0_1 ])
        (nil)))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 84 [ _3 ])
                (ashift:DI (reg:DI 83 [ _2 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":15:32 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 84 [ _3 ])) "fib.c":15:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (nil)))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f1011046800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "fib.c":15:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 112)
        (reg:DI 0 ax)) "fib.c":15:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 112)
            (nil))))
(insn 18 17 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
        (reg/f:DI 112)) "fib.c":15:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112)
        (nil)))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
            (const_int 0 [0]))) "fib.c":16:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "fib.c":16:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 32)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:DI 85 [ stderr.1_4 ])
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f1011a3ccf0 stderr>) [4 stderr+0 S8 A64])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 2 cx)
        (reg/f:DI 85 [ stderr.1_4 ])) "fib.c":17:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ stderr.1_4 ])
        (nil)))
(insn 24 23 25 3 (set (reg:DI 1 dx)
        (const_int 25 [0x19])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 4 si)
        (const_int 1 [0x1])) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 113)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f101115a630 *.LC1>)) "fib.c":17:9 74 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (reg:DI 113)) "fib.c":17:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 113)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f101115a630 *.LC1>)
            (nil))))
(call_insn 28 27 29 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f1011026c00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) "fib.c":17:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 29 28 127 3 (set (reg:SI 108 [ _29 ])
        (const_int 1 [0x1])) "fib.c":18:16 75 {*movsi_internal}
     (nil))
(jump_insn 127 29 128 3 (set (pc)
        (label_ref 111)) "fib.c":18:16 807 {jump}
     (nil)
 -> 111)
(barrier 128 127 32)
(code_label 32 128 33 4 2 (nil) [1 uses])
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":22:12 74 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DF 115)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) "fib.c":22:12 135 {*movdf_internal}
     (nil))
(insn 36 35 37 4 (set (mem:DF (reg/f:DI 114) [5 *fib_37+0 S8 A64])
        (reg:DF 115)) "fib.c":22:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 115)
        (expr_list:REG_DEAD (reg/f:DI 114)
            (nil))))
(insn 37 36 40 4 (set (reg:SI 86 [ n.2_5 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":23:11 75 {*movsi_internal}
     (nil))
(insn 40 37 41 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 86 [ n.2_5 ])
            (const_int 1 [0x1]))) "fib.c":23:8 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 86 [ n.2_5 ])
        (nil)))
(jump_insn 41 40 42 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "fib.c":23:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 47)
(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 5 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":24:12 74 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg/f:DI 116)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":24:12 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 45 44 46 5 (set (reg:DF 117)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S8 A64])) "fib.c":24:16 135 {*movdf_internal}
     (nil))
(insn 46 45 47 5 (set (mem:DF (reg/f:DI 87 [ _6 ]) [5 *_6+0 S8 A64])
        (reg:DF 117)) "fib.c":24:16 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 117)
        (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
            (nil))))
(code_label 47 46 48 6 4 (nil) [1 uses])
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 129 6 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
        (const_int 2 [0x2])) "fib.c":28:14 75 {*movsi_internal}
     (nil))
(jump_insn 129 49 130 6 (set (pc)
        (label_ref 75)) "fib.c":28:5 807 {jump}
     (nil)
 -> 75)
(barrier 130 129 78)
(code_label 78 130 52 7 6 (nil) [1 uses])
(note 52 78 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])) "fib.c":29:21 75 {*movsi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:DI 88 [ _7 ])
        (sign_extend:DI (reg:SI 118))) "fib.c":29:21 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 55 54 56 7 (parallel [
            (set (reg:DI 89 [ _8 ])
                (ashift:DI (reg:DI 88 [ _7 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:21 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 56 55 57 7 (parallel [
            (set (reg:DI 90 [ _9 ])
                (plus:DI (reg:DI 89 [ _8 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:21 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 7 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":29:21 74 {*movdi_internal}
     (nil))
(insn 58 57 59 7 (parallel [
            (set (reg/f:DI 91 [ _10 ])
                (plus:DI (reg:DI 90 [ _9 ])
                    (reg/f:DI 119)))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:21 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (expr_list:REG_DEAD (reg:DI 90 [ _9 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
                        (reg:DI 90 [ _9 ]))
                    (nil))))))
(insn 59 58 60 7 (set (reg:DF 92 [ _11 ])
        (mem:DF (reg/f:DI 91 [ _10 ]) [5 *_10+0 S8 A64])) "fib.c":29:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _10 ])
        (nil)))
(insn 60 59 61 7 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])) "fib.c":29:34 75 {*movsi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:DI 93 [ _12 ])
        (sign_extend:DI (reg:SI 120))) "fib.c":29:34 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 62 61 63 7 (parallel [
            (set (reg:DI 94 [ _13 ])
                (ashift:DI (reg:DI 93 [ _12 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:34 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 63 62 64 7 (parallel [
            (set (reg:DI 95 [ _14 ])
                (plus:DI (reg:DI 94 [ _13 ])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:34 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 63 65 7 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":29:34 74 {*movdi_internal}
     (nil))
(insn 65 64 66 7 (parallel [
            (set (reg/f:DI 96 [ _15 ])
                (plus:DI (reg:DI 95 [ _14 ])
                    (reg/f:DI 121)))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:34 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 121)
        (expr_list:REG_DEAD (reg:DI 95 [ _14 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
                        (reg:DI 95 [ _14 ]))
                    (nil))))))
(insn 66 65 67 7 (set (reg:DF 97 [ _16 ])
        (mem:DF (reg/f:DI 96 [ _15 ]) [5 *_15+0 S8 A64])) "fib.c":29:34 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _15 ])
        (nil)))
(insn 67 66 68 7 (set (reg:SI 122)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])) "fib.c":29:12 75 {*movsi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:DI 98 [ _17 ])
        (sign_extend:DI (reg:SI 122))) "fib.c":29:12 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 69 68 70 7 (parallel [
            (set (reg:DI 99 [ _18 ])
                (ashift:DI (reg:DI 98 [ _17 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:12 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 98 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 7 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":29:12 74 {*movdi_internal}
     (nil))
(insn 71 70 72 7 (parallel [
            (set (reg/f:DI 100 [ _19 ])
                (plus:DI (reg:DI 99 [ _18 ])
                    (reg/f:DI 123)))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":29:12 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 123)
        (expr_list:REG_DEAD (reg:DI 99 [ _18 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
                        (reg:DI 99 [ _18 ]))
                    (nil))))))
(insn 72 71 73 7 (set (reg:DF 101 [ _20 ])
        (plus:DF (reg:DF 92 [ _11 ])
            (reg:DF 97 [ _16 ]))) "fib.c":29:29 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 97 [ _16 ])
        (expr_list:REG_DEAD (reg:DF 92 [ _11 ])
            (nil))))
(insn 73 72 74 7 (set (mem:DF (reg/f:DI 100 [ _19 ]) [5 *_19+0 S8 A64])
        (reg:DF 101 [ _20 ])) "fib.c":29:16 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 101 [ _20 ])
        (expr_list:REG_DEAD (reg/f:DI 100 [ _19 ])
            (nil))))
(insn 74 73 75 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":28:29 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 75 74 76 8 5 (nil) [1 uses])
(note 76 75 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 79 8 (set (reg:SI 102 [ n.3_21 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":28:23 75 {*movsi_internal}
     (nil))
(insn 79 77 80 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A64])
            (reg:SI 102 [ n.3_21 ]))) "fib.c":28:23 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 102 [ n.3_21 ])
        (nil)))
(jump_insn 80 79 81 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "fib.c":28:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 78)
(note 81 80 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 131 9 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
        (const_int 0 [0])) "fib.c":33:14 75 {*movsi_internal}
     (nil))
(jump_insn 131 82 132 9 (set (pc)
        (label_ref 98)) "fib.c":33:5 807 {jump}
     (nil)
 -> 98)
(barrier 132 131 101)
(code_label 101 132 85 10 8 (nil) [1 uses])
(note 85 101 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 10 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "fib.c":34:33 75 {*movsi_internal}
     (nil))
(insn 87 86 88 10 (set (reg:DI 103 [ _22 ])
        (sign_extend:DI (reg:SI 124))) "fib.c":34:33 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(insn 88 87 89 10 (parallel [
            (set (reg:DI 104 [ _23 ])
                (ashift:DI (reg:DI 103 [ _22 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":34:33 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _22 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 89 88 90 10 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":34:33 74 {*movdi_internal}
     (nil))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 105 [ _24 ])
                (plus:DI (reg:DI 104 [ _23 ])
                    (reg/f:DI 125)))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":34:33 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 125)
        (expr_list:REG_DEAD (reg:DI 104 [ _23 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])
                        (reg:DI 104 [ _23 ]))
                    (nil))))))
(insn 91 90 92 10 (set (reg:DF 106 [ _25 ])
        (mem:DF (reg/f:DI 105 [ _24 ]) [5 *_24+0 S8 A64])) "fib.c":34:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _24 ])
        (nil)))
(insn 92 91 93 10 (set (reg:DF 20 xmm0)
        (reg:DF 106 [ _25 ])) "fib.c":34:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 106 [ _25 ])
        (nil)))
(insn 93 92 94 10 (set (reg:DI 126)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f101115a6c0 *.LC4>)) "fib.c":34:9 74 {*movdi_internal}
     (nil))
(insn 94 93 95 10 (set (reg:DI 5 di)
        (reg:DI 126)) "fib.c":34:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 126)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f101115a6c0 *.LC4>)
            (nil))))
(insn 95 94 96 10 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "fib.c":34:9 77 {*movqi_internal}
     (nil))
(call_insn 96 95 97 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f1011027100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "fib.c":34:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 97 96 98 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fib.c":33:29 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 98 97 99 11 7 (nil) [1 uses])
(note 99 98 100 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 102 11 (set (reg:SI 107 [ n.4_26 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 n+0 S4 A32])) "fib.c":33:23 75 {*movsi_internal}
     (nil))
(insn 102 100 103 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
            (reg:SI 107 [ n.4_26 ]))) "fib.c":33:23 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 107 [ n.4_26 ])
        (nil)))
(jump_insn 103 102 104 11 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) "fib.c":33:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 101)
(note 104 103 105 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 12 (set (reg:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 fib+0 S8 A64])) "fib.c":38:5 74 {*movdi_internal}
     (nil))
(insn 106 105 107 12 (set (reg:DI 5 di)
        (reg:DI 127)) "fib.c":38:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 127)
        (nil)))
(call_insn 107 106 108 12 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f101103fd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "fib.c":38:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 108 107 111 12 (set (reg:SI 108 [ _29 ])
        (const_int 0 [0])) "fib.c":40:12 75 {*movsi_internal}
     (nil))
(code_label 111 108 112 13 9 (nil) [1 uses])
(note 112 111 113 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 117 13 (set (reg:SI 109 [ <retval> ])
        (reg:SI 108 [ _29 ])) "fib.c":41:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [ _29 ])
        (nil)))
(insn 117 113 118 13 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [1 D.2886+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 130))
        ]) "fib.c":41:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 130)
        (nil)))
(jump_insn 118 117 125 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "fib.c":41:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 121)
(note 125 118 119 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 119 125 120 14 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f1011164900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "fib.c":41:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 120 119 121)
(code_label 121 120 126 15 10 (nil) [1 uses])
(note 126 121 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 122 126 123 15 (set (reg/i:SI 0 ax)
        (reg:SI 109 [ <retval> ])) "fib.c":41:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109 [ <retval> ])
        (nil)))
(insn 123 122 0 15 (use (reg/i:SI 0 ax)) "fib.c":41:1 -1
     (nil))
